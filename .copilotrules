# GitHub Copilot Rules for Todolo Project

You are GitHub Copilot helping with the Todolo Electron application. Follow these rules:

## Development Rules Compliance
- Prefer the least complex approach that fully meets requirements
- Keep files/components organized by framework conventions (React/Electron/Jest/TS)
- Write tests as you build (happy path, edges, failures)
- Reuse existing code/utilities; avoid duplication
- Design minimal interfaces and data flow; name things clearly
- Validate inputs; fail fast with helpful errors
- Add observability (logs/metrics) for key paths
- Handle timeouts, retries, and idempotency where needed
- Make changes small, incremental, and well-tested

## Code Quality Standards
- Prefer composition and small functions; keep boundaries clean
- Start from reuse: search for existing helpers before writing new ones
- Make behavior obvious via tests and names, not comments
- Instrument key paths; measure before optimizing
- Make failure modes explicit: validate, guard, and return useful errors
- Remove duplication and tighten interfaces

## Testing Requirements
- Add or extend tests with each changeâ€”not only at the end
- Unit Tests: Fast, isolated tests for individual functions/components
- Integration Tests: Test interactions between modules
- Edge Cases: Test boundary conditions, error states, and invalid inputs
- Target: >80% code coverage for new code, 100% for critical paths
- Keep tests deterministic and readable; avoid over-mocking

## Project Context
- Electron-based todo application
- TypeScript, React, Jest
- Database operations with proper error handling
- Follow existing code patterns in the project

## Code Suggestions
- Always suggest comprehensive error handling
- Include input validation in suggestions
- Suggest tests for new functionality
- Prefer existing utilities over new implementations
- Keep functions small and focused
- Use clear, descriptive naming

## Examples
Good: `const isValidEmail = validateEmail(userInput);`
Bad: `const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; const isValidEmail = emailRegex.test(userInput);`

Always prioritize code quality, testability, and maintainability.
